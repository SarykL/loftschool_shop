/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$arrow-name: 'arrow';
$arrow-x: 51px;
$arrow-y: 70px;
$arrow-offset-x: -51px;
$arrow-offset-y: -70px;
$arrow-width: 18px;
$arrow-height: 11px;
$arrow-total-width: 126px;
$arrow-total-height: 130px;
$arrow-image: '../img/sprites/sprite.png';
$arrow: (51px, 70px, -51px, -70px, 18px, 11px, 126px, 130px, '../img/sprites/sprite.png', 'arrow', );
$carrete-name: 'carrete';
$carrete-x: 118px;
$carrete-y: 0px;
$carrete-offset-x: -118px;
$carrete-offset-y: 0px;
$carrete-width: 8px;
$carrete-height: 14px;
$carrete-total-width: 126px;
$carrete-total-height: 130px;
$carrete-image: '../img/sprites/sprite.png';
$carrete: (118px, 0px, -118px, 0px, 8px, 14px, 126px, 130px, '../img/sprites/sprite.png', 'carrete', );
$checked-hover-name: 'checked-hover';
$checked-hover-x: 0px;
$checked-hover-y: 111px;
$checked-hover-offset-x: 0px;
$checked-hover-offset-y: -111px;
$checked-hover-width: 19px;
$checked-hover-height: 19px;
$checked-hover-total-width: 126px;
$checked-hover-total-height: 130px;
$checked-hover-image: '../img/sprites/sprite.png';
$checked-hover: (0px, 111px, 0px, -111px, 19px, 19px, 126px, 130px, '../img/sprites/sprite.png', 'checked-hover', );
$checked-name: 'checked';
$checked-x: 105px;
$checked-y: 14px;
$checked-offset-x: -105px;
$checked-offset-y: -14px;
$checked-width: 13px;
$checked-height: 10px;
$checked-total-width: 126px;
$checked-total-height: 130px;
$checked-image: '../img/sprites/sprite.png';
$checked: (105px, 14px, -105px, -14px, 13px, 10px, 126px, 130px, '../img/sprites/sprite.png', 'checked', );
$map-pin-name: 'map-pin';
$map-pin-x: 81px;
$map-pin-y: 38px;
$map-pin-offset-x: -81px;
$map-pin-offset-y: -38px;
$map-pin-width: 12px;
$map-pin-height: 16px;
$map-pin-total-width: 126px;
$map-pin-total-height: 130px;
$map-pin-image: '../img/sprites/sprite.png';
$map-pin: (81px, 38px, -81px, -38px, 12px, 16px, 126px, 130px, '../img/sprites/sprite.png', 'map-pin', );
$rub-name: 'rub';
$rub-x: 93px;
$rub-y: 24px;
$rub-offset-x: -93px;
$rub-offset-y: -24px;
$rub-width: 12px;
$rub-height: 14px;
$rub-total-width: 126px;
$rub-total-height: 130px;
$rub-image: '../img/sprites/sprite.png';
$rub: (93px, 24px, -93px, -24px, 12px, 14px, 126px, 130px, '../img/sprites/sprite.png', 'rub', );
$star-filled-name: 'star-filled';
$star-filled-x: 35px;
$star-filled-y: 81px;
$star-filled-offset-x: -35px;
$star-filled-offset-y: -81px;
$star-filled-width: 16px;
$star-filled-height: 15px;
$star-filled-total-width: 126px;
$star-filled-total-height: 130px;
$star-filled-image: '../img/sprites/sprite.png';
$star-filled: (35px, 81px, -35px, -81px, 16px, 15px, 126px, 130px, '../img/sprites/sprite.png', 'star-filled', );
$star-name: 'star';
$star-x: 19px;
$star-y: 96px;
$star-offset-x: -19px;
$star-offset-y: -96px;
$star-width: 16px;
$star-height: 15px;
$star-total-width: 126px;
$star-total-height: 130px;
$star-image: '../img/sprites/sprite.png';
$star: (19px, 96px, -19px, -96px, 16px, 15px, 126px, 130px, '../img/sprites/sprite.png', 'star', );
$telephone-name: 'telephone';
$telephone-x: 69px;
$telephone-y: 54px;
$telephone-offset-x: -69px;
$telephone-offset-y: -54px;
$telephone-width: 12px;
$telephone-height: 16px;
$telephone-total-width: 126px;
$telephone-total-height: 130px;
$telephone-image: '../img/sprites/sprite.png';
$telephone: (69px, 54px, -69px, -54px, 12px, 16px, 126px, 130px, '../img/sprites/sprite.png', 'telephone', );
$spritesheet-width: 126px;
$spritesheet-height: 130px;
$spritesheet-image: '../img/sprites/sprite.png';
$spritesheet-sprites: ($arrow, $carrete, $checked-hover, $checked, $map-pin, $rub, $star-filled, $star, $telephone, );
$spritesheet: (126px, 130px, '../img/sprites/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
